<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.opencil.bs.mapper.BsStudentMapper">
  <resultMap id="BaseResultMap" type="cn.opencil.bs.po.BsStudent">
    <id column="uid" jdbcType="BIGINT" property="uid" />
    <result column="academyid" jdbcType="VARCHAR" property="academyid" />
    <result column="deptid" jdbcType="VARCHAR" property="deptid" />
    <result column="employeenum" jdbcType="VARCHAR" property="employeenum" />
    <result column="stdname" jdbcType="VARCHAR" property="stdname" />
    <result column="password" jdbcType="VARCHAR" property="password" />
    <result column="sex" jdbcType="INTEGER" property="sex" />
    <result column="major" jdbcType="VARCHAR" property="major" />
    <result column="rankid" jdbcType="VARCHAR" property="rankid" />
    <result column="kind" jdbcType="VARCHAR" property="kind" />
    <result column="phone" jdbcType="VARCHAR" property="phone" />
    <result column="email" jdbcType="VARCHAR" property="email" />
    <result column="research" jdbcType="VARCHAR" property="research" />
    <result column="comments" jdbcType="VARCHAR" property="comments" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    uid, academyid, deptid, employeenum, stdname, password, sex, major, rankid, kind, 
    phone, email, research, comments
  </sql>
  <select id="selectByExample" parameterType="cn.opencil.bs.po.BsStudentExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from bs_student
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from bs_student
    where uid = #{uid,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from bs_student
    where uid = #{uid,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="cn.opencil.bs.po.BsStudentExample">
    delete from bs_student
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="cn.opencil.bs.po.BsStudent">
    insert into bs_student (uid, academyid, deptid, 
      employeenum, stdname, password, 
      sex, major, rankid, 
      kind, phone, email, 
      research, comments)
    values (#{uid,jdbcType=BIGINT}, #{academyid,jdbcType=VARCHAR}, #{deptid,jdbcType=VARCHAR}, 
      #{employeenum,jdbcType=VARCHAR}, #{stdname,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR}, 
      #{sex,jdbcType=INTEGER}, #{major,jdbcType=VARCHAR}, #{rankid,jdbcType=VARCHAR}, 
      #{kind,jdbcType=VARCHAR}, #{phone,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR}, 
      #{research,jdbcType=VARCHAR}, #{comments,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="cn.opencil.bs.po.BsStudent">
    insert into bs_student
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="uid != null">
        uid,
      </if>
      <if test="academyid != null">
        academyid,
      </if>
      <if test="deptid != null">
        deptid,
      </if>
      <if test="employeenum != null">
        employeenum,
      </if>
      <if test="stdname != null">
        stdname,
      </if>
      <if test="password != null">
        password,
      </if>
      <if test="sex != null">
        sex,
      </if>
      <if test="major != null">
        major,
      </if>
      <if test="rankid != null">
        rankid,
      </if>
      <if test="kind != null">
        kind,
      </if>
      <if test="phone != null">
        phone,
      </if>
      <if test="email != null">
        email,
      </if>
      <if test="research != null">
        research,
      </if>
      <if test="comments != null">
        comments,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="uid != null">
        #{uid,jdbcType=BIGINT},
      </if>
      <if test="academyid != null">
        #{academyid,jdbcType=VARCHAR},
      </if>
      <if test="deptid != null">
        #{deptid,jdbcType=VARCHAR},
      </if>
      <if test="employeenum != null">
        #{employeenum,jdbcType=VARCHAR},
      </if>
      <if test="stdname != null">
        #{stdname,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="sex != null">
        #{sex,jdbcType=INTEGER},
      </if>
      <if test="major != null">
        #{major,jdbcType=VARCHAR},
      </if>
      <if test="rankid != null">
        #{rankid,jdbcType=VARCHAR},
      </if>
      <if test="kind != null">
        #{kind,jdbcType=VARCHAR},
      </if>
      <if test="phone != null">
        #{phone,jdbcType=VARCHAR},
      </if>
      <if test="email != null">
        #{email,jdbcType=VARCHAR},
      </if>
      <if test="research != null">
        #{research,jdbcType=VARCHAR},
      </if>
      <if test="comments != null">
        #{comments,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="cn.opencil.bs.po.BsStudentExample" resultType="java.lang.Long">
    select count(*) from bs_student
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update bs_student
    <set>
      <if test="record.uid != null">
        uid = #{record.uid,jdbcType=BIGINT},
      </if>
      <if test="record.academyid != null">
        academyid = #{record.academyid,jdbcType=VARCHAR},
      </if>
      <if test="record.deptid != null">
        deptid = #{record.deptid,jdbcType=VARCHAR},
      </if>
      <if test="record.employeenum != null">
        employeenum = #{record.employeenum,jdbcType=VARCHAR},
      </if>
      <if test="record.stdname != null">
        stdname = #{record.stdname,jdbcType=VARCHAR},
      </if>
      <if test="record.password != null">
        password = #{record.password,jdbcType=VARCHAR},
      </if>
      <if test="record.sex != null">
        sex = #{record.sex,jdbcType=INTEGER},
      </if>
      <if test="record.major != null">
        major = #{record.major,jdbcType=VARCHAR},
      </if>
      <if test="record.rankid != null">
        rankid = #{record.rankid,jdbcType=VARCHAR},
      </if>
      <if test="record.kind != null">
        kind = #{record.kind,jdbcType=VARCHAR},
      </if>
      <if test="record.phone != null">
        phone = #{record.phone,jdbcType=VARCHAR},
      </if>
      <if test="record.email != null">
        email = #{record.email,jdbcType=VARCHAR},
      </if>
      <if test="record.research != null">
        research = #{record.research,jdbcType=VARCHAR},
      </if>
      <if test="record.comments != null">
        comments = #{record.comments,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update bs_student
    set uid = #{record.uid,jdbcType=BIGINT},
      academyid = #{record.academyid,jdbcType=VARCHAR},
      deptid = #{record.deptid,jdbcType=VARCHAR},
      employeenum = #{record.employeenum,jdbcType=VARCHAR},
      stdname = #{record.stdname,jdbcType=VARCHAR},
      password = #{record.password,jdbcType=VARCHAR},
      sex = #{record.sex,jdbcType=INTEGER},
      major = #{record.major,jdbcType=VARCHAR},
      rankid = #{record.rankid,jdbcType=VARCHAR},
      kind = #{record.kind,jdbcType=VARCHAR},
      phone = #{record.phone,jdbcType=VARCHAR},
      email = #{record.email,jdbcType=VARCHAR},
      research = #{record.research,jdbcType=VARCHAR},
      comments = #{record.comments,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="cn.opencil.bs.po.BsStudent">
    update bs_student
    <set>
      <if test="academyid != null">
        academyid = #{academyid,jdbcType=VARCHAR},
      </if>
      <if test="deptid != null">
        deptid = #{deptid,jdbcType=VARCHAR},
      </if>
      <if test="employeenum != null">
        employeenum = #{employeenum,jdbcType=VARCHAR},
      </if>
      <if test="stdname != null">
        stdname = #{stdname,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        password = #{password,jdbcType=VARCHAR},
      </if>
      <if test="sex != null">
        sex = #{sex,jdbcType=INTEGER},
      </if>
      <if test="major != null">
        major = #{major,jdbcType=VARCHAR},
      </if>
      <if test="rankid != null">
        rankid = #{rankid,jdbcType=VARCHAR},
      </if>
      <if test="kind != null">
        kind = #{kind,jdbcType=VARCHAR},
      </if>
      <if test="phone != null">
        phone = #{phone,jdbcType=VARCHAR},
      </if>
      <if test="email != null">
        email = #{email,jdbcType=VARCHAR},
      </if>
      <if test="research != null">
        research = #{research,jdbcType=VARCHAR},
      </if>
      <if test="comments != null">
        comments = #{comments,jdbcType=VARCHAR},
      </if>
    </set>
    where uid = #{uid,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="cn.opencil.bs.po.BsStudent">
    update bs_student
    set academyid = #{academyid,jdbcType=VARCHAR},
      deptid = #{deptid,jdbcType=VARCHAR},
      employeenum = #{employeenum,jdbcType=VARCHAR},
      stdname = #{stdname,jdbcType=VARCHAR},
      password = #{password,jdbcType=VARCHAR},
      sex = #{sex,jdbcType=INTEGER},
      major = #{major,jdbcType=VARCHAR},
      rankid = #{rankid,jdbcType=VARCHAR},
      kind = #{kind,jdbcType=VARCHAR},
      phone = #{phone,jdbcType=VARCHAR},
      email = #{email,jdbcType=VARCHAR},
      research = #{research,jdbcType=VARCHAR},
      comments = #{comments,jdbcType=VARCHAR}
    where uid = #{uid,jdbcType=BIGINT}
  </update>


</mapper>